<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Lucas' Refuge</title><link href="http://x8lucas8x.com/" rel="alternate"></link><link href="http://x8lucas8x.com/feeds/tags/blog.atom.xml" rel="self"></link><id>http://x8lucas8x.com/</id><updated>2015-10-18T20:40:00-03:00</updated><entry><title>On Integration Testing andÂ Microservices</title><link href="http://x8lucas8x.com/on-integration-testing-and-microservices.html" rel="alternate"></link><updated>2015-10-18T20:40:00-03:00</updated><author><name>x8lucas8x</name></author><id>tag:x8lucas8x.com,2015-10-18:on-integration-testing-and-microservices.html</id><summary type="html">&lt;p&gt;To begin with, higher level (e.g. end-to-end, integration) testing lacks several
benefits of unit testing, many of which we have come to value as an industry. On
the other hand, not all bugs are apparent at an unit level. They could also
happen on the wiring between components or even in those off-the-shelf solutions
that you employed to speed up your development. Yet you often heard the agile
community endorsing unit tests as the backbone of a solid testing strategy. People
like &lt;a href="https://twitter.com/mikewcohn"&gt;@mikewcohn&lt;/a&gt;, who established the initial model of the &lt;a href="http://martinfowler.com/bliki/TestPyramid.html"&gt;testing pyramid&lt;/a&gt;, were
key in developing the notion that the ratio of a particular kind of test, in your
test suite, should be inversely proportional to the degree of granularity of the
tested scope. Principle that helps a solid test suite to be built in the most
cost-effective way. And beware, since going in the opposite direction may result
in an instance of the &lt;a href="http://watirmelon.com/2012/01/31/introducing-the-software-testing-ice-cream-cone/"&gt;ice cream cone&lt;/a&gt; anti pattern. So, even though you certainly
could find several definitions for the properties of good unit tests out there,
those roughly translate&amp;nbsp;to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fast&lt;/li&gt;
&lt;li&gt;Automated&lt;/li&gt;
&lt;li&gt;Isolated&lt;/li&gt;
&lt;li&gt;Informative&lt;/li&gt;
&lt;li&gt;Idempotent&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first one is easy to explain, as long-running tests are the easiest way to make
programmers develop the bad habit of avoid running tests frequently. And, if that
happens, what is the point anyway? Automated since the intention is to facilitate
adoption, not making people do repetitive work. Isolated because they should not
overlap, otherwise you would have more places to look for when something fails.
Informative, because the context of the failure should be explicit. Yep, you probably
do not want people to analyse your test&amp;#8217;s source so that they can understand what
went wrong. Finally, idempotency implies that they should behave the same, no matter
which order or how many times they were run. Believe me, tests that randomly fail
are a recipe for madness. They are worse than no tests at all, as they undermine
developers&amp;#8217; trust in their test&amp;nbsp;suite.&lt;/p&gt;
&lt;p&gt;So, how do those properties apply to higher level (e.g. end-to-end, integration)
testing. First, they are not as fast as unit tests. Especially if you are testing
two &lt;a href="http://martinfowler.com/articles/microservices.html"&gt;microservices&lt;/a&gt;, process that would involve exchanging some packets over the
network (latency sucks :/). They are not idempotent too, as there are many ways
they could go wrong. Units that rely in global state (e.g. singleton pattern)
can also suffer from that unpredictability, but a proper use of dependency
injection can fix the problem. As for lost packets, network partition, good luck
with it. Informative, well, you know something in between a set of components/services
is not working well. Isolated? Nope, even though you can be cautious enough to avoid
chatty components/services, one bug in one of them and you would suddenly find
yourself in a situation in which every code path along the way fail. But hey, they
could be&amp;nbsp;automated.&lt;/p&gt;
&lt;p&gt;Did you find my point of view a bit extreme? Then try &lt;a href="https://twitter.com/jbrains"&gt;@jbrains&lt;/a&gt; amazing talk titled
&lt;a href="https://vimeo.com/80533536"&gt;Integrated Tests Are a Scam&lt;/a&gt;. Seriously, if you want to laugh a bit with integrated
tests&amp;#8217; infamous positive feedback loop of negative emotions, watch it. Additionally,
a written equivalent of it is available on &lt;a href="http://www.jbrains.ca/permalink/integrated-tests-are-a-scam-part-1"&gt;Integrated Tests are a Scam: Part 1&lt;/a&gt;. In
the aforementioned talk, &lt;a href="https://twitter.com/jbrains"&gt;@jbrains&lt;/a&gt; shows how the promises of high level testing
lures developers into favouring writing more tests of the same kind that, at the end,
would provide very few coverage. Due to the combinatorial explosion of required tests,
needed for the continuously increasing code paths. Instead, he advocates that we should
spend our time with worthwhile tests. By worthwhile he means tests that help assessing
the quality of our architecture, allowing us to improve its design in the long run.
Position that is understandable, since he is a test-driven development (&lt;span class="caps"&gt;TDD&lt;/span&gt;) practitioner.
After all, &lt;span class="caps"&gt;TDD&lt;/span&gt; is not about testing, it is about design. As for the tests, they are solely
a pleasant&amp;nbsp;by-product.&lt;/p&gt;
&lt;p&gt;In &lt;a href="http://www.jbrains.ca/permalink/part-2-some-hidden-costs-of-integration-tests"&gt;Part 2: Some Hidden Costs of Integration Tests&lt;/a&gt;, he also discusses about an important
side-effect of slow tests, they destroy developers&amp;#8217; productivity. Waiting for a few seconds
is &lt;span class="caps"&gt;OK&lt;/span&gt;, but it is not rare to find tests suites that take ten minutes or more. Unfortunately,
one cannot simply return to him/her peak performance right after such a long interruption.
In &lt;a href="http://www.jbrains.ca/permalink/part-3-the-risks-associated-with-lengthy-tests"&gt;Part 3: The risks associated with lengthy tests&lt;/a&gt;, the focus changes to the insidious
consequences of frequent false alerts, given the lack of isolation when things fail. And
with less trust in the test suite, a fear of change starts to evolve among developers.
Individuals that tend to justify their behaviour by mentioning an old engineering saying
&lt;em&gt;&amp;#8220;If it works, why change it?&amp;#8221;&lt;/em&gt;. Rationale that will ultimately lead to an architectural
stagnation and to high interest rates in the form of &lt;a href="http://martinfowler.com/bliki/TechnicalDebt.html"&gt;technical debt&lt;/a&gt;. Quite the contrary
to what you expected when you got bought into the practice of &lt;a href="http://martinfowler.com/bliki/SelfTestingCode.html"&gt;self testing code&lt;/a&gt;,&amp;nbsp;right?&lt;/p&gt;
&lt;p&gt;But do not get him wrong, his disregard for integration testing limits itself to cases
in which they are used for assessing basic correctness. Role that is better suited to
unit tests, in the first place. In &lt;a href="http://www.jbrains.ca/permalink/using-integration-tests-mindfully-a-case-study"&gt;Using integration tests mindfully: a case study&lt;/a&gt;, for
instance, he does see a value in employing integration tests for identifying system-level
issues like broken database schema, mistaken cache integration, and more complex problems.
That is, using integration tests to check the presence of a expected feature, is perfectly&amp;nbsp;fine.&lt;/p&gt;
&lt;p&gt;Still, in &lt;a href="https://vimeo.com/80533536"&gt;Integrated Tests Are a Scam&lt;/a&gt;, &lt;a href="https://twitter.com/jbrains"&gt;@jbrains&lt;/a&gt; proposes an alternative for testing the
interaction between components without resorting to integration testing. He suggests
combining collaboration and contract tests. Collaboration tests are a well known practice,
often named as &lt;a href="http://martinfowler.com/bliki/TestDouble.html"&gt;test doubles&lt;/a&gt;. More specifically, stubs are the the kind of doubles we
are interested in. Stubs tend to mimic others&amp;#8217; interfaces, but instead of doing real work,
they return pre-computed results. Behaviour that is really useful when non-deterministic
or slow operations (e.g. &lt;span class="caps"&gt;IO&lt;/span&gt;) are at stake, as we can employ fast and predictable unit-like
tests to achieve a similar end. As for contract tests, they check the format of an
component/service response, not its data. So, in the case of &lt;a href="http://martinfowler.com/articles/microservices.html"&gt;microservices&lt;/a&gt;, you would
be testing if the outcome of a particular call has the fields you expected and if so,
whether they comply with your use cases. Similarly, &lt;a href="https://twitter.com/martinfowler"&gt;@martinfowler&lt;/a&gt; also see the combination
of stubs and contract tests as a good way to tackle the slowness and unreliability of
integration tests, as stated in &lt;a href="http://martinfowler.com/bliki/IntegrationContractTest.html"&gt;integration contract test&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One challenge though is that testing against a double does not guarantee that the external
component/service is being accurately represented. And even if so, future changes would
require the double to be updated accordingly. One alternative to streamline the updates of
stubs would be what &lt;a href="https://twitter.com/martinfowler"&gt;@martinfowler&lt;/a&gt; calls &lt;a href="http://martinfowler.com/bliki/SelfInitializingFake.html"&gt;self initialising fakes&lt;/a&gt;. Similarly, contract
testing also suffers from the same synchronisation burden, however &lt;a href="http://martinfowler.com/bliki/SelfInitializingFake.html"&gt;self initialising fakes&lt;/a&gt;
cannot help contract tests in the same manner. Additionally, there is also the possibility of
contracts and stubs getting out of sync. Problem that could be mitigated by a shared metadata
file or data structure that specifies available calls and what should be received in response,
so that you do not have to concern yourself with&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;To reduce the odds of getting out of sync, therefore breaking your test cases, or even
worse, being misled by passing tests that should have failed, it is recommended to adopt
a consumer-driven contract approach. In &lt;a href="http://martinfowler.com/articles/consumerDrivenContracts.html"&gt;Consumer-Driven Contracts: A Service Evolution
Pattern&lt;/a&gt;, the concept is explained in a relatively implementation agnostic fashion. In a
nutshell, consumer-driven contracts are a means of applying &amp;#8220;just enough&amp;#8221; validation, as
proposed by &lt;a href="https://en.wikipedia.org/wiki/Robustness_principle"&gt;John Postel&amp;#8217;s Law&lt;/a&gt;, which puts the responsibility to specify what the service
provider must comply on the clients. The service provider must then check the union of
its consumers&amp;#8217; expectations, in order to verify that there were no regressions. Additionally,
that approach has some notable design advantages. First, it facilitates evolving your
interface, as you wouldn&amp;#8217;t have to rely on schema extension points for adding new fields
to your messages. Second, since what is consumed is explicitly stated, deprecating a field
that nobody is using is way&amp;nbsp;easier.&lt;/p&gt;
&lt;p&gt;Fortunately, the usefulness of mixing stubs and consumer-driven contract tests have led
to the development of frameworks such as &lt;a href="https://github.com/realestate-com-au/pact"&gt;Pact&lt;/a&gt; and &lt;a href="https://thoughtworks.github.io/pacto/"&gt;Pacto&lt;/a&gt;, both written in Ruby. More
importantly, they facilitate your stubs and contract tests to be in sync. Personally, I
think that frameworks like that are a really promising way for guaranteeing compatibility
among services&amp;#8217; interfaces, while maintaining many of the unit testing properties. So, next
time you get yourself considering to test some &lt;a href="http://martinfowler.com/articles/microservices.html"&gt;microservices&lt;/a&gt; with integration testing,
think twice. If you just want to check compatibility among services&amp;#8217; interfaces, invest in
stubs and consumer-driven contract testing&amp;nbsp;instead.&lt;/p&gt;</summary><category term="microservices"></category><category term="integration testing"></category><category term="test doubles"></category><category term="consumer-driven contracts"></category><category term="soa"></category><category term="blog"></category></entry><entry><title>Zeroless</title><link href="http://x8lucas8x.com/zeroless.html" rel="alternate"></link><updated>2015-08-18T21:16:00-03:00</updated><author><name>x8lucas8x</name></author><id>tag:x8lucas8x.com,2015-08-18:zeroless.html</id><summary type="html">&lt;p&gt;Using &lt;a href="http://zeromq.org/"&gt;ZeroMQ&lt;/a&gt; in Python with &lt;a href="https://github.com/zeromq/pyzmq"&gt;PyZMQ&lt;/a&gt;, however, always made me feel like I&amp;#8217;m coding in
C/C++, which I also love by the way. Unfortunately, that lack of &lt;a href="https://github.com/zeromq/pyzmq"&gt;PyZMQ&lt;/a&gt; &lt;span class="caps"&gt;API&lt;/span&gt;&amp;#8217;s, if I
may say, &amp;#8220;pythonicity&amp;#8221;, just felt wrong to me. And by the end of last January, I
decided to do something about it. So that is how &lt;a href="https://github.com/zmqless/python-zeroless"&gt;Zeroless&lt;/a&gt; was&amp;nbsp;born.&lt;/p&gt;
&lt;p&gt;My mission was to leverage on &lt;a href="https://github.com/zeromq/pyzmq"&gt;PyZMQ&lt;/a&gt; to build a more elegant wrapper for &lt;a href="http://zeromq.org/"&gt;ZeroMQ&lt;/a&gt;.
Something more aligned with the python way of doing things. And, to a certain degree,
I have succeeded. However, I have never made a comprehensive effort to publicise
&lt;a href="https://github.com/zmqless/python-zeroless"&gt;Zeroless&lt;/a&gt; in any way so, in this post, I hope not only to explain how &lt;a href="https://github.com/zmqless/python-zeroless"&gt;Zeroless&lt;/a&gt;
differs from &lt;a href="https://github.com/zeromq/pyzmq"&gt;PyZMQ&lt;/a&gt; but also to reach a greater audience, that may be as enthusiastic
about &lt;a href="http://zeromq.org/"&gt;ZeroMQ&lt;/a&gt; as myself. Therefore, without further ado, here goes some of the design
decisions I have made for &lt;a href="https://github.com/zmqless/python-zeroless"&gt;Zeroless&lt;/a&gt;:&lt;/p&gt;
&lt;h1&gt;&lt;span class="caps"&gt;TCP&lt;/span&gt; only for the&amp;nbsp;win&lt;/h1&gt;
&lt;p&gt;Ok, I know &lt;span class="caps"&gt;PGM&lt;/span&gt;, &lt;span class="caps"&gt;INPROC&lt;/span&gt; and &lt;span class="caps"&gt;IPC&lt;/span&gt; have their use cases. &lt;span class="caps"&gt;PGM&lt;/span&gt; for instance provides a
Publish/Subscribe specific transport, that scales better than &lt;span class="caps"&gt;TCP&lt;/span&gt; in the
Publish/Subscribe use case, as it cut out the &lt;span class="caps"&gt;ACK&lt;/span&gt; flood publishers gets on
every new message. There are also some extra reliability, that you also cannot
find in &lt;span class="caps"&gt;TCP&lt;/span&gt;. &lt;span class="caps"&gt;IPC&lt;/span&gt;, on the other hand, is a pattern agnostic way of providing more
efficient inter-process communication than traditional networking, but is Unix-like
only. As for &lt;span class="caps"&gt;INPROC&lt;/span&gt;&amp;#8217;s particular case, which efficient applicability is being
hindered by the Python&amp;#8217;s &lt;span class="caps"&gt;GIL&lt;/span&gt;, I do not see why bother with&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Nevertheless, I have a feeling that the vast majority of the users, like myself,
are quite good with just &lt;span class="caps"&gt;TCP&lt;/span&gt;. Which is exactly what you need when building really
horizontally scalable networked services, especially in this time of a renewed
vision for &lt;span class="caps"&gt;SOA&lt;/span&gt;, with microservices having a lot of attention. So let us just use
&lt;span class="caps"&gt;TCP&lt;/span&gt; and free our minds to think about other&amp;nbsp;matters.&lt;/p&gt;
&lt;h1&gt;No more&amp;nbsp;contexts&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/zeromq/pyzmq"&gt;PyZMQ&lt;/a&gt; applications require users to create a context, in order to instantiate
sockets. Technically, a context serves as a container for all your sockets and
usually one of it, per process, is just what you need. As a matter of fact, you
could have more, but why bother your runtime with more event loops, for your
socket stuff, when one suffices? Also, if you are using &lt;span class="caps"&gt;INPROC&lt;/span&gt; as transport,
you may also need to share a context for the communication to happen. But again,
if &lt;span class="caps"&gt;INPROC&lt;/span&gt; is is not that useful in Python as aforementioned, do we really need
explicitly manage&amp;nbsp;contexts?&lt;/p&gt;
&lt;p&gt;Not at all, so that is why in &lt;a href="https://github.com/zmqless/python-zeroless"&gt;Zeroless&lt;/a&gt; you just have to manage Clients, sockets
that connect, and Servers, sockets that bind, without concerning yourself with
contexts ;). For instance, in order to instantiate a client you&amp;nbsp;would:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;# You could use connect_local(port=12345) as well&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12345&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Similarly, for servers, you&amp;nbsp;would:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12345&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# No need to call bind here&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Finally, note that no real connect/bind will occur unless you instantiate a
messaging pattern, which are the subject of our next&amp;nbsp;topic.&lt;/p&gt;
&lt;h1&gt;Like a factory method&amp;nbsp;pattern&lt;/h1&gt;
&lt;p&gt;One thing I never liked about &lt;a href="https://github.com/zeromq/pyzmq"&gt;PyZMQ&lt;/a&gt; sockets&amp;#8217;s instantiation is that we have to call
a method called socket, which receives an enum representing the type of the socket.
Why don&amp;#8217;t they just provide a separate method for every socket possible, like as if
it was a factory method pattern kind of interface. That would allow a more
straightforward experience for developers, that could then rely on their favourite
&lt;span class="caps"&gt;IDE&lt;/span&gt;&amp;#8217;s code complete to quickly understand what kind of sockets and parameters they
could set. That enum approach, however, will probably make your users go to the
documentation, but solely because of the way the &lt;a href="https://github.com/zeromq/pyzmq"&gt;PyZMQ&lt;/a&gt;&amp;#8216;s interface&amp;nbsp;is.&lt;/p&gt;
&lt;p&gt;In &lt;a href="https://github.com/zmqless/python-zeroless"&gt;Zeroless&lt;/a&gt;, we fixed that, so you don&amp;#8217;t need to check the documentation every
time you want to instantiate a socket, instead just have a descent code complete
support and you are done. For instance, compare how you would instantiate a
publisher socket with &lt;a href="https://github.com/zmqless/python-zeroless"&gt;Zeroless&lt;/a&gt;:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;pub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12345&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h1&gt;Connections&amp;nbsp;awareness&lt;/h1&gt;
&lt;p&gt;One of the questions you may ask is to whom your clients are connected to. And
for that, &lt;a href="https://github.com/zeromq/pyzmq"&gt;PyZMQ&lt;/a&gt; cannot help you. Unless you manage that list off connections by
yourself, you wouldn&amp;#8217;t be able to get it afterwards. Therefore, in &lt;a href="https://github.com/zmqless/python-zeroless"&gt;Zeroless&lt;/a&gt;,
we provide an addresses property, so that you can retrieve all your ip and port
pairs as a list of tuples. But that is only for clients of course, as there is
no way to know which sockets are connected to your server without building
some sort of infrastructure for that&amp;nbsp;yourself.&lt;/p&gt;
&lt;h1&gt;Subscribe should not be&amp;nbsp;tricky&lt;/h1&gt;
&lt;p&gt;In terms of interface, the subscribe case is particularly problematic in &lt;a href="https://github.com/zeromq/pyzmq"&gt;PyZMQ&lt;/a&gt;.
One must use the not so intuitive &lt;a href="https://zeromq.github.io/pyzmq/api/zmq.html#zmq.Context.setsockopt"&gt;setsockopt()&lt;/a&gt; method, in
order to define the topics it subscribes to. Like in the following&amp;nbsp;snippet:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SUB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SUBSCRIBE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# Subscribe to all topics&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I believe most new &lt;a href="http://zeromq.org/"&gt;ZeroMQ&lt;/a&gt;&amp;#8216;s user get this wrong at first, as they supose no
topic means you are subscribed to all topics, and keep asking himself/herself why
that damn subscriber socket does not receives your published&amp;nbsp;messages.&lt;/p&gt;
&lt;p&gt;In &lt;a href="https://github.com/zmqless/python-zeroless"&gt;Zeroless&lt;/a&gt;, we fixed that, so that you don&amp;#8217;t have to instantiate your socket
and set something as essential as a topic, in the subscribe case, via some kind
of &amp;#8220;obscure&amp;#8221; method. Just compare how you would instantiate a subscriber socket
with &lt;a href="https://github.com/zmqless/python-zeroless"&gt;Zeroless&lt;/a&gt;:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;listen_for_pub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;topics&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h1&gt;Generators and high-order functions as first class&amp;nbsp;citizens&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/zeromq/pyzmq"&gt;PyZMQ&lt;/a&gt; sockets tend to use &lt;a href="https://zeromq.github.io/pyzmq/api/zmq.html#zmq.Socket.send"&gt;send()&lt;/a&gt; and &lt;a href="https://zeromq.github.io/pyzmq/api/zmq.html#zmq.Socket.recv"&gt;recv()&lt;/a&gt; methods
for the message exchange part. However, it always felt wrong to me to do stuff&amp;nbsp;like:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c"&gt;# do something with data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;That is, if Python has built-in support for iterables, or generators if you prefer,
why don&amp;#8217;t we just do something&amp;nbsp;like:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;listen_for_push&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12345&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pull&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;listen_for_push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# do something with data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Way more idiomatic to read incoming messages that way, right? As for sending them,
I also followed a different&amp;nbsp;path.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Msg1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Therefore, in &lt;a href="https://github.com/zmqless/python-zeroless"&gt;Zeroless&lt;/a&gt;, every time you instantiate a message pattern that is
suposed to send messages, use it as a function. Otherwise, treat it as a&amp;nbsp;generator.&lt;/p&gt;
&lt;h1&gt;Multi-part made&amp;nbsp;easy&lt;/h1&gt;
&lt;p&gt;In &lt;a href="https://github.com/zeromq/pyzmq"&gt;PyZMQ&lt;/a&gt;, if you want to send a multipart message, you have to use the
&lt;a href="https://zeromq.github.io/pyzmq/api/zmq.html#zmq.Socket.recv_multipart"&gt;recv_multipart()&lt;/a&gt; and &lt;a href="https://zeromq.github.io/pyzmq/api/zmq.html#zmq.Socket.send_multipart"&gt;send_multipart()&lt;/a&gt;
methods. Methods that instead of a single message, will deal with a list of them.
In &lt;a href="https://github.com/zmqless/python-zeroless"&gt;Zeroless&lt;/a&gt;, I favoured consistency for a quicker and easier learning path,
therefore there is no difference between the singlepart and the multipart &lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;If you want to send a multipart message, just consider that your send function have
a printf like interface and you are set. So, for instance, if you want to send an
id separated from your message body, you&amp;nbsp;could:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;OK&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Additionally, if someone send you a multipart message, your generator will return a
tuple with all of its parts. As a result of that, to get the message from the previous
example you would need&amp;nbsp;to:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;listen_for_push&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12345&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pull&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;listen_for_push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# do something with id and msg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h1&gt;The&amp;nbsp;future&lt;/h1&gt;
&lt;p&gt;Although feature parity was never part of my plans, there still some of &lt;a href="https://github.com/zeromq/pyzmq"&gt;PyZMQ&lt;/a&gt;&amp;#8216;s
functionalities I would like to provide in &lt;a href="https://github.com/zmqless/python-zeroless"&gt;Zeroless&lt;/a&gt;. Like both &lt;a href="https://zeromq.github.io/pyzmq/api/zmq.html#poller"&gt;poller&lt;/a&gt;
and &lt;a href="https://zeromq.github.io/pyzmq/api/zmq.devices.html"&gt;devices&lt;/a&gt; APIs, for instance. So expect more on the way o/. While
that, if you felt compelled to help shape this project, please clone our &lt;a href="https://github.com/zmqless/python-zeroless.git"&gt;repository&lt;/a&gt;
and see our &lt;a href="http://python-zeroless.readthedocs.org/en/latest/development.html#contributing"&gt;guidelines&lt;/a&gt;.&lt;/p&gt;</summary><category term="networking"></category><category term="python"></category><category term="zeroless"></category><category term="zeromq"></category><category term="pyzmq"></category><category term="messaging"></category><category term="blog"></category></entry><entry><title>Moving toÂ Pelican</title><link href="http://x8lucas8x.com/moving-to-pelican.html" rel="alternate"></link><updated>2015-08-18T20:40:00-03:00</updated><author><name>x8lucas8x</name></author><id>tag:x8lucas8x.com,2015-08-08:moving-to-pelican.html</id><summary type="html">&lt;p&gt;The motivation was twofold. First, provide me more control over my own blog. Second,
learn more about web technologies (i.e. &lt;span class="caps"&gt;HTML&lt;/span&gt;, &lt;span class="caps"&gt;CSS&lt;/span&gt;, &lt;span class="caps"&gt;JS&lt;/span&gt;) in the way. So, that&amp;#8217;s it.
Hope you can find some interesting posts here in the near future&amp;nbsp;o/.&lt;/p&gt;</summary><category term="pelican"></category><category term="publishing"></category><category term="personal"></category><category term="blog"></category></entry></feed>